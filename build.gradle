plugins {
	id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: "maven-publish"
apply plugin: 'signing' //使用signing plugin做数字签名

group = 'com.luamas.kaptcha'
description = "kaptcha"
sourceCompatibility = 17
targetCompatibility = 17

ext.versions = [
	jhlabs: '2.0.235-1',
	servlet: '6.0.0'
]

jar {
    manifest {
		manifest.attributes["Implementation-Title"] = project.name
		manifest.attributes["Implementation-Version"] = project.version
		manifest.attributes["Automatic-Module-Name"] = project.name.replace('-', '.')  // for Jigsaw
		manifest.attributes["Created-By"] =
				"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    api("com.jhlabs:filters:${versions.jhlabs}")
	compileOnly("jakarta.servlet:jakarta.servlet-api:${versions.servlet}")
}


jar {
	manifest.attributes["Implementation-Title"] = project.name
	manifest.attributes["Implementation-Version"] = project.version
	manifest.attributes["Automatic-Module-Name"] = project.name.replace('-', '.')
	manifest.attributes["Created-By"] =
			"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
}

compileJava {
	options.encoding = 'UTF-8'
	options.warnings = false
	options.deprecation = true
	options.compilerArgs += ["-parameters"]
}

compileTestJava {
	options.encoding = 'UTF-8'
}

javadoc {
	description = "Generates project-level javadoc for use in -javadoc jar"
	options.encoding = "UTF-8"
	options.memberLevel = JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.name
	options.use = true
	options.addStringOption("Xdoclint:none", "-quiet")
	logging.captureStandardError LogLevel.INFO
	logging.captureStandardOutput LogLevel.INFO
}

normalization {
	runtimeClasspath {
		ignore "META-INF/MANIFEST.MF"
	}
}

//参见Part 2， 为项目生成**.jar/**-javadoc.jar/**-sources.jar  
task javadocJar(type: Jar) {
	archiveClassifier.set("javadoc")
	from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}



tasks.withType(GenerateModuleMetadata) {
	enabled = false
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom {
				afterEvaluate {
					name = project.description
					description = project.description
				}
				url = "https://github.com/luamas/kaptcha"
				licenses {
					license {
						name = "Apache License, Version 2.0"
						url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
						distribution = "repo"
					}
				}
				scm {
					url = "scm:git@github.com:luamas/kaptcha.git"
					connection = "scm:git@github.com:luamas/kaptcha.git"
					developerConnection = "scm:git@github.com:luamas/kaptcha.git"
				}
				developers {
					developer {
						id = "pengpeng"
						name = "Peng Peng"
					}
					developer {
						id = "luamas"
						name = "luamas"
						email = "luamas@163.com"
					}
				}
			}
			versionMapping {
				usage('java-api') {
					fromResolutionResult()
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
}
//为所有的jar包做数字签名
signing {
	sign publishing.publications.mavenJava
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl= uri("https://oss.sonatype.org/service/local/")
			snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
			username = sonatypeUsername
			password = sonatypePassword
		}
	}
}